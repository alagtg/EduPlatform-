{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.api = `${environment.apiUrl}/auth`;\n    this.tokenKey = 'jwtToken';\n  }\n  login(email, password) {\n    return this.http.post(`${this.api}/login`, {\n      email,\n      password\n    });\n  }\n  saveToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n    this.router.navigate(['/login']);\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      const decoded = jwtDecode(token);\n      return decoded.exp * 1000 > Date.now();\n    } catch {\n      return false;\n    }\n  }\n  getProfSlugFromToken() {\n    const token = this.getToken();\n    if (!token) return '';\n    const payload = jwtDecode(token);\n    return payload.slug || '';\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","jwtDecode","AuthService","constructor","http","router","api","apiUrl","tokenKey","login","email","password","post","saveToken","token","localStorage","setItem","getToken","getItem","logout","removeItem","navigate","isLoggedIn","decoded","exp","Date","now","getProfSlugFromToken","payload","slug","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\PC\\Desktop\\projetangular.nethoudaetraja\\EduPlatformFront\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { jwtDecode } from 'jwt-decode';\nimport { Router } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private api = `${environment.apiUrl}/auth`;\n  private tokenKey = 'jwtToken';\n  \n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(email: string, password: string) {\n    return this.http.post<any>(`${this.api}/login`, { email, password });\n  }\n\n  saveToken(token: string) { localStorage.setItem(this.tokenKey, token); }\n  getToken(): string | null { return localStorage.getItem(this.tokenKey); }\n  logout() { localStorage.removeItem(this.tokenKey); this.router.navigate(['/login']); }\n\n  isLoggedIn(): boolean {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      const decoded: any = jwtDecode(token);\n      return decoded.exp * 1000 > Date.now();\n    } catch { return false; }\n  }\n\n  getProfSlugFromToken(): string {\n    const token = this.getToken();\n    if (!token) return '';\n    const payload: any = jwtDecode(token);\n    return payload.slug || '';\n  }\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,mCAAmC;AAC/D,SAASC,SAAS,QAAQ,YAAY;;;;AAItC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAH5C,KAAAC,GAAG,GAAG,GAAGN,WAAW,CAACO,MAAM,OAAO;IAClC,KAAAC,QAAQ,GAAG,UAAU;EAEkC;EAE/DC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACN,GAAG,QAAQ,EAAE;MAAEI,KAAK;MAAEC;IAAQ,CAAE,CAAC;EACtE;EAEAE,SAASA,CAACC,KAAa;IAAIC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACR,QAAQ,EAAEM,KAAK,CAAC;EAAE;EACvEG,QAAQA,CAAA;IAAoB,OAAOF,YAAY,CAACG,OAAO,CAAC,IAAI,CAACV,QAAQ,CAAC;EAAE;EACxEW,MAAMA,CAAA;IAAKJ,YAAY,CAACK,UAAU,CAAC,IAAI,CAACZ,QAAQ,CAAC;IAAE,IAAI,CAACH,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAAE;EAErFC,UAAUA,CAAA;IACR,MAAMR,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,IAAI,CAACH,KAAK,EAAE,OAAO,KAAK;IACxB,IAAI;MACF,MAAMS,OAAO,GAAQtB,SAAS,CAACa,KAAK,CAAC;MACrC,OAAOS,OAAO,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,EAAE;IACxC,CAAC,CAAC,MAAM;MAAE,OAAO,KAAK;IAAE;EAC1B;EAEAC,oBAAoBA,CAAA;IAClB,MAAMb,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,IAAI,CAACH,KAAK,EAAE,OAAO,EAAE;IACrB,MAAMc,OAAO,GAAQ3B,SAAS,CAACa,KAAK,CAAC;IACrC,OAAOc,OAAO,CAACC,IAAI,IAAI,EAAE;EAC3B;;;uCA5BW3B,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXjC,WAAW;MAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}